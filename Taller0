package Taller0;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**

 *@author BLAUDIO VARGAS / JORGE CORTES

 */

public class Taller0 {

	public static int[][][][][] sala;//@param The data of each seat of the 3 rooms is saved in its two schedules
	public static String[][] usuario;//@param All users' data is saved
	public static String[][] status;//@param The states of all users are saved
	public static int totalusuario;//@param total of users in the system
	public static int[] saldo;//@param User balances are saved
	public static String[][] pelicula;//@param Movie related data is saved
	public static int[] recaudacion;//@param earnings for each movie
	public static int totalmovies;//@param total of moviens in the system
	public static boolean[][][] horario;//@param if the movies have a show in the room at certain times
	
	
	public static void main(String [] args) throws IOException {
		sala = new int[99][3][2][10][30];
		usuario = new String[999][5];
		totalusuario=0;
		saldo = new int[999];
		pelicula = new String[99][2];
		recaudacion = new int[99];
		totalmovies=0;
		horario = new boolean[99][3][2];
		
		boolean valido = leer();
		if (valido){
			boolean continuar = true;
			while(continuar) {
				continuar = inicio();
			}
			guardar();
		}
		System.out.println("SALIENDO DEL PROGRAMA, GRACIAS POR PREFERIRNOS");
	}
	
	public static boolean leer() {//@return if it was possible to load all the data, it returns TRUE
		for(int x =0;x<99;x++) {
			for(int a =0;a<3;a++) {
				for(int b =0;a<3;a++) {
					for(int c =0;a<3;a++) {
						for(int d =0;a<3;a++) {
							if(c<4 && (d<5 || d>24)) {
								sala[x][a][b][c][d]=-2;
							}
							else {
								sala[x][a][b][c][d]=-1;
							}
						}
					}
				}
			}
		}
		for(int a =0;a<3;a++) {
			for(int b =0;a<3;a++) {
				for(int c =0;a<3;a++) {
					horario[a][b][c]=false;
				}
			}
		}
		boolean valido = leerCliente();
		if (valido) {
			valido=leerStatus();
			if(valido) {
				valido=leerPeliculas();
			}
		}
		return valido;
	}
	
	public static boolean leerCliente() {//@return if it was possible to load "clientes.txt", it returns TRUE
		try {
			File archivo = new File ("clientes.txt"); 
			FileReader text = new FileReader (archivo); 
			BufferedReader reader = new BufferedReader(text); 
			String linea;
			String[] partes;
			int contador=0;
			while((linea = reader.readLine())!=null && contador <999){
				partes = linea.split(",");
				usuario[contador][0]=partes[0];
				usuario[contador][1]=partes[1];
				usuario[contador][2]=partes[2];
				usuario[contador][3]=partes[3];
				saldo[contador]=Integer.parseInt(partes[4]);
				contador++;
			 }
			 reader.close();
			 totalusuario= contador;
			 return true;
		}
		catch (Exception e) {
			System.out.println("ARCHIVO DE CLIENTES CORRUPTO/INEXISTENTE");
			return false;
		}
	}
	
	public static boolean leerStatus() {//@return if it was possible to load "status.txt", it returns TRUE
		try {
			File archivo = new File ("status.txt"); 
			FileReader text = new FileReader (archivo); 
			BufferedReader reader = new BufferedReader(text); 
			String linea;
			String[] partes;
			while((linea = reader.readLine())!=null){
				partes = linea.split(",");
				int direccion = getUsuario(partes[0]);
				if (direccion>=0) {
					usuario[direccion][4]=partes[1];
				}
			 }
			 reader.close();
			 return true;
		}
		catch (Exception e) {
			System.out.println("ARCHIVO DE STATUS CORRUPTO/INEXISTENTE");
			return false;
		}
	}
	
	public static boolean leerPeliculas() {//@return if it was possible to load "peliculas.txt", it returns TRUE
		try {
			File archivo = new File ("peliculas.txt"); 
			FileReader text = new FileReader (archivo); 
			BufferedReader reader = new BufferedReader(text); 
			String linea;
			String[] partes;
			int contador=0;
			while((linea = reader.readLine())!=null && contador <99){
				partes = linea.split(",");
				pelicula[contador][0]=partes[0];
				pelicula[contador][1]=partes[1];
				recaudacion[contador]=Integer.parseInt(partes[2]);
				int tamano = partes.length;
				for(int i=3;i<tamano;i+=2) {
					int coordenadas =0;
					if(partes[i+1].equals("T") || partes[i+1].equals("t")) {
						coordenadas=1;
					}
					horario[contador][Integer.parseInt(partes[i])][coordenadas]=true;
				}
				contador++;
			 }
			totalmovies=contador;
			 reader.close();
			 return true;
		}
		catch (Exception e) {
			System.out.println("ARCHIVO DE STATUS CORRUPTO/INEXISTENTE");
			return false;
		}
	}
	
	public static boolean inicio() {//@return returns TRUE if the user wnats to continue to use the program
		@SuppressWarnings("resource")
		var sc= new Scanner(System.in);
		System.out.println("INICIO DE SECION");
		System.out.println("Escriba su Rut");
		System.out.println("Se finaliza con 0:");
		String seleccion = sc.nextLine();
		int direccion = getUsuario(decodificarRut(seleccion));
		if((seleccion).equals("0"))
		{
			System.out.println("Se a finalizado la operacion");
			return false;
		}
		else if (seleccion.equals("ADMIN"))
		{
			System.out.println("Escriba su contraseña");
			String password = sc.nextLine();
			if((password).equals("ADMIN"))
			{
				ADMIN();
			}
			else
			{
				System.out.println("ERROR-Contraseña invalida");
			}
		}
		else if(direccion>=0)
		{
			System.out.println("Escriba su contraseña");
			String password = sc.nextLine();
			if((usuario[direccion][4].equals(password)))
			{
				cliente(direccion);
			}
			else
			{
				System.out.println("ERROR-Contraseña invalida");
			}
		}
		else if(totalusuario<999)
		{
			System.out.println("Usuario no existe");
			System.out.println("Desea crar un nuevo Usuario");
			System.out.println("Y/N");
			String clave =sc.nextLine();
			if(((clave).equals("y")||(clave).equals("Y")))
			{
				crearUsuario(seleccion);
			}
			else if((clave).equals("n")||(clave).equals("N"))
			{
				/// NO SE HACE NADA
			}
			else
			{
				System.out.println("ERROR COMANDO NO RECONOCIDO");
			}
			System.out.println("Volviendo al principio de la operacion");
		}
		else {
			System.out.println("ERROR NO EXITE USUARIO / LIMITE DE USUARIO EN EL SISTEMA ALCANZADO");
		}
	return true;
	}
	
	public static void crearUsuario(String rut) {
		try {
			@SuppressWarnings("resource")
			var sc= new Scanner(System.in);
			System.out.println("Crear nuevo usuario RUT:"+rut);
			System.out.print("-)NOMBRE:");
			String name = sc.nextLine();
			System.out.println();
			System.out.print("-)Apellido:");
			String lName = sc.nextLine();
			System.out.println();
			System.out.print("-)Clave:");
			String password = sc.nextLine();
			System.out.println();
			System.out.print("-)Saldo:");
			int fondos = sc.nextInt();
			System.out.println();
			usuario[totalusuario][0]=name;
			usuario[totalusuario][1]=lName;
			usuario[totalusuario][2]=rut;
			usuario[totalusuario][3]=password;
			saldo[totalusuario]=fondos;
			totalusuario++;
			System.out.println("El usuario "+name+" "+lName+" fue creado con exito");
		}
		catch (Exception e) {
			System.out.println("ARCHIVO DE NUEVO USUARIO INVALIDO");
		}
	}
	
	public static String decodificarRut(String rut) {//@return a simplified version of the rut
		String[] partes;
		partes = rut.split("");
		if(partes.length==12)
		{
			if(partes[11].equals("k"))
			{
				partes[11]="K";
			}
			return partes[0]+partes[1]+partes[3]+partes[4]+partes[5]+partes[7]+partes[8]+partes[9]+partes[11];
			
		}
		if(partes.length==11)
		{
			if(partes[10].equals("k"))
			{
				partes[10]="K";
			}
			return partes[0] + partes[2]+partes[3]+partes[4] + partes[6]+partes[7]+partes[8] +partes[10];
		}
		else if(partes.length==10)
		{
			if(partes[9].equals("k"))
			{
				partes[9]="K";
			}
			return partes[0]+partes[1]+partes[2]+partes[3]+partes[4]+partes[5]+partes[6]+partes[7]+partes[9];
		}
		else if(partes.length==9)
		{
			if(partes[8].equals("k"))
			{
				partes[8]="K";
			}
			return partes[0]+partes[1]+partes[2]+partes[3]+partes[4]+partes[5]+partes[6]+partes[7]+partes[8];
		}
		else if(partes.length==8)
		{
			if(partes[7].equals("k"))
			{
				partes[7]="K";
			}
			return partes[0]+partes[1]+partes[2]+partes[3]+partes[4]+partes[5]+partes[6]+partes[7];
		}
		else
		{
			return rut;
		}
	}
	
	public static int getUsuario(String rut) {//@return the direction of the wanted user
		int direccion =-1;
		String rutA = decodificarRut(rut);
		for (int i =0; i<totalusuario;i++) {
			String rutB = decodificarRut(usuario[i][2]);
			if(rutA.equals(rutB)) {
				direccion=i;
				break;
			}
		}
		return direccion;
	}
	
	public static void cliente(int direccion) {
		boolean valido = true;
		while(valido) {
			@SuppressWarnings("resource")
			var sc= new Scanner(System.in);
			System.out.println("Cliente "+ usuario[direccion][3]);
			System.out.println("1)Comprar entrada");
			System.out.println("2)Informacion usuario");
			System.out.println("3)Devolucion entrada");
			System.out.println("4)Cartelera");
			System.out.println("0)Salir");
			String respuesta = sc.nextLine();
			if(respuesta.equals("1")) {
				compra(direccion);
			}
			else if(respuesta.equals("2")) {
				user(direccion);		
			}
			else if(respuesta.equals("3")) {
				devolucion(direccion);
			}
			else if(respuesta.equals("4")) {
				cartelera(direccion);
			}
			else if(respuesta.equals("0")) {
				valido = false;
				System.out.println("Saliendo de menu usario");
			}
			else {
				System.out.println("ERROR RESPUESTA NO VALIDA");
			}
		}
	}
	
	public static void compra(int direccion) {
		@SuppressWarnings("resource")
		var sc= new Scanner(System.in);
		System.out.println("COMPRAR ENTREADA DE PELICULA");
		System.out.print("Nombre de pelicula: ");
		String respuesta = sc.nextLine();
		System.out.println();
		int movie=-1;
		for(int a=0;a<totalmovies;a++) {
			if(respuesta.equals(pelicula[a][0])) {
				movie=a;
				break;
			}
		}
		if(movie<=0) {
			for(int a=0;a<3;a++) {
				for(int b=0;b<2;b++) {
					if(horario[movie][a][b]) {
						String abc = "MT";
						String[] partes = abc.split("");
						System.out.println("Funcion en sala "+a+" horario "+partes[b]);
					}
				}
			}
			System.out.print("Seleccione su sala: ");
			String salon = sc.nextLine();
			System.out.println();
			System.out.print("Seleccione su horario: ");
			String hora = sc.nextLine();
			System.out.println();
			try {
				int a = Integer.parseInt(salon);
				int b =-1;
				if(hora.equals("m")||hora.equals("M")){
					b=0;
				}
				else if(hora.equals("t")||hora.equals("T")){
					b=1;
				}
				if(horario[movie][a][b]) {
					for(int y=0;y<10;y++) {
						System.out.print("|");
						for(int x=0;x<30;x++) {
							System.out.print(sala[movie][a][b][y][x]+"|");
						}
						System.out.println();
					}
					System.out.print("Porfavor indique la cantidad de asientos que desea comprar");
					int totalcompra = sc.nextInt();
					int contador=0;
					System.out.println();
					int costo =0;
					if(pelicula[movie][1].equals("estreno")) {
						costo=5500*totalcompra;
					}
					else {
						costo=4000*totalcompra;
					}
					if(usuario[direccion][4].equals("HABILITADO")) {
						costo=(int) (costo*0.85);
					}
					boolean posible =true;
					boolean continuar=true;
					while(continuar) {
						if(costo>saldo[direccion]) {
							System.out.println("Saldo insuficiente, Desea agregar mas saldo (Y/N)");
							respuesta = sc.nextLine();
							if(respuesta.equals("Y")||respuesta.equals("Y")) {
								System.out.print("Porfavor indique la cantidad de saldo a agregar");
								int nuevoSaldo = sc.nextInt();
								System.out.println();
								saldo[direccion]+=nuevoSaldo;
							}
							else if(respuesta.equals("N")||respuesta.equals("n")){
								posible = false;
								continuar=false;
							}
							
						}
						else {
							saldo[direccion]-=costo;
							recaudacion[movie]+=costo;
							continuar=false;
						}
					}
					while(contador<totalcompra && posible) {
						System.out.print("Porfavor indique la coordenada X del asiento");
						int asientoX = sc.nextInt();
						System.out.println();
						System.out.print("Porfavor indique la coordenada Y del asiento");
						int asientoY = sc.nextInt();
						System.out.println();
						if(sala[movie][a][b][asientoY][asientoX]==-1) {
							boolean funciono =false;
							if(asientoX>0 || asientoX<29) {
								if((sala[movie][a][b][asientoY][asientoX-1]==-1)&&(sala[movie][a][b][asientoY][asientoX+1]==-1)) {
									sala[movie][a][b][asientoY][asientoX]=direccion;
									funciono=true;
									contador++;
								}
							}
							else if (asientoX==0){
								if(sala[movie][a][b][asientoY][asientoX+1]==-1) {
									sala[movie][a][b][asientoY][asientoX]=direccion;
									funciono=true;
									contador++;
								}
							}
							else if (asientoX==29){
								if(sala[movie][a][b][asientoY][asientoX-1]==-1) {
									sala[movie][a][b][asientoY][asientoX]=direccion;
									funciono=true;
									contador++;
								}
							}
							if(funciono) {
								System.out.println("El asiento se compro con exito");
							}
							else {
								System.out.println("ERROR ASIENTO NO CUMPLE CON REGULACION COVID");
							}
							
						}
						else {
							System.out.println("ERROR ASIENTO YA TIENE DUEÑO");
						}
					}
				}
				else{
					System.out.println("SALA/HORARIO NO VALIDO");
				}
			}
			catch (Exception e) {
				System.out.println("ERROR");
			}
		}
		else {
			System.out.println("ERROR NO EXISTE PELICULA");
		}
	}
	
	public static void devolucion(int direccion) {
		@SuppressWarnings("resource")
		var sc= new Scanner(System.in);
		System.out.println("DEVOLUCION");
		int contador=0;
		int[] listado = new int[99];
		int totalListado=0;
		for (int x =0;x<3;x++) {
			for (int a =0;a<3;a++) {
				for (int b =0;b<2;b++) {
					for (int c =0;c<10;c++) {
						for (int d =0;d<30;d++) {
							if(sala[x][a][b][c][d]==direccion) {
								String Horario ="Mañana";
								if(b==1) {
									Horario="Tarde";
								}
								String alfabeto="ABCDEFGHIJ";
								String[] partes = alfabeto.split("");
								System.out.println(contador+")"+pelicula[x][0]+" - Sala:"+(a+1)+" - Horario de la "+Horario+" - En el Asiento "+partes[c]+d);
								contador++;
								listado[totalListado]=x;
								totalListado++;
							}
						}
					}
				}
			}
		}
		System.out.print("Nombre de pelicula: ");
		String respuesta = sc.nextLine();
		System.out.println();
		for(int i=0;i<totalListado;i++) {
			if(respuesta.equals(pelicula[listado[i]][0])) {
				System.out.print("Indique la sala");
				int numerosala = sc.nextInt();
				System.out.println();
				System.out.print("Indique el horario(M/T)");
				String horariosala = sc.nextLine();
				System.out.println();
				int salahorario=-1;
				if(horariosala.equals("M")||horariosala.equals("m")) {
					salahorario=0;
				}
				else if(horariosala.equals("T")||horariosala.equals("t")){
					salahorario=1;
				}
				if(salahorario>=0) {
					if(horario[listado[i]][numerosala][salahorario]) {
						int totalasientos=0;
						for (int c =0;c<10;c++) {
							for (int d =0;d<30;d++) {
								if(sala[listado[i]][numerosala][salahorario][c][d]==direccion) {
									totalasientos++;
								}
							}
						}
						System.out.println("Porfavor indique la cantidad de asientos que desea reembolsar");
						int totalasientosreembolso = sc.nextInt();
						System.out.println();
						if(totalasientosreembolso>totalasientos) {
							totalasientosreembolso=totalasientos;
							System.out.println("La cantidad de asientos que deseea reembolzar son mas de la cantidad que tiene");
							System.out.println("por lo que se cambio a su maximo de asientos en esta sala que es de :"+totalasientos+" asientos");
						}
						int costo =0;
						if(pelicula[listado[i]][1].equals("estreno")) {
							costo=5500*totalasientosreembolso;
						}
						else {
							costo=4000*totalasientosreembolso;
						}
						if(usuario[direccion][4].equals("HABILITADO")) {
							costo=(int) (costo*0.85);
						}
						costo=(int) (costo*0.8);
						for (int c =0;c<10;c++) {
							for (int d =0;d<30;d++) {
								if(sala[listado[i]][numerosala][salahorario][c][d]==direccion && totalasientosreembolso>0) {
									sala[listado[i]][numerosala][salahorario][c][d]=-1;
									totalasientosreembolso--;
								}
							}
						}
						saldo[direccion]+=costo;
						recaudacion[listado[i]]-=costo;
						System.out.println("Se reembolsaron todas las entradas con exito");
					}
					else {
						System.out.println("ERROR PELICULA NO ADMINITDA PARA DEVOLUCION");
					}
				}
				
				
			}
			else {
				System.out.print("ERROR PELICULA NO ADMINITDA PARA DEVOLUCION");
			}
		}
	}
	
	public static void cartelera(int direccion) {
		System.out.print("CARTELERA");
		for(int a=0;a<99;a++) {
			System.out.println("-"+pelicula[a][0]);
			for(int b=0;b<3;b++) {
				System.out.println("-- Sala "+b);
				for(int c=0;c<3;c++) {
					if(horario[a][b][c]) {
						String abc = "MT";
						String[] partes = abc.split("");
						System.out.println("--- Horario "+partes[b]);
					}
				}
			}
		}
	}
	
	public static void user(int direccion) {
		try {
			System.out.println("Nombre :"+usuario[direccion][0]);
			System.out.println("Apellido :"+usuario[direccion][1]);
			System.out.println("Rut :"+usuario[direccion][2]);
			System.out.println("Saldo :"+saldo[direccion]);
			int contador=1;
			for (int x =0;x<3;x++) {
				for (int a =0;a<3;a++) {
					for (int b =0;b<2;b++) {
						for (int c =0;c<10;c++) {
							for (int d =0;d<30;d++) {
								if(sala[x][a][b][c][d]==direccion) {
									String Horario ="Mañana";
									if(b==1) {
										Horario="Tarde";
									}
									/*int movie=-1;
									for(int y=0;y<totalmovies;y++) {
										if(horario[y][a][b]==true) {
											movie=y;
											break;
										}
									}*/
									String alfabeto="ABCDEFGHIJ";
									String[] partes = alfabeto.split("");
									System.out.println(contador+")"+pelicula[x]+" - Sala:"+(a+1)+" - Horario de la "+Horario+" - En el Asiento "+partes[c]+d);
									contador++;
								}
							}
						}
					}
				}
			}
			
		}
		catch (Exception e) {
			System.out.println("ERROR USUARIO NO VALIDO PARA LECTURA");
		}
	}
	
	public static void ADMIN() {
		boolean valido = true;
		while(valido) {
			@SuppressWarnings("resource")
			var sc= new Scanner(System.in);
			System.out.println("1)Taquilla");
			System.out.println("2)Informacion cliente");
			System.out.println("0)Salir");
			String respuesta = sc.nextLine();
			if(respuesta.equals("1")) {
				taquilla();
			}
			else if(respuesta.equals("2")) {
				info();		
			}
			else if(respuesta.equals("0")) {
				valido = false;
				System.out.println("Saliendo de menu ADMIN");
			}
			else {
				System.out.println("ERROR RESPUESTA NO VALIDA");
			}
		}
	}
	
	public static void taquilla() {
		System.out.print("CARTELERA");
		for(int a=0;a<99;a++) {
			System.out.println("-"+pelicula[a][0]);
			for(int b=0;b<3;b++) {
				for(int c=0;c<2;c++) {
					int saldototal=0;
					for(int d=0;d<10;d++) {
						for(int e=0;e<30;e++) {
							int costo =0;
							if(sala[a][b][c][d][e]>=0) {
								if(pelicula[a][1].equals("estreno")) {
									costo=5500;
								}
								else {
									costo=4000;
								}
								if(usuario[sala[a][b][c][d][e]][4].equals("HABILITADO")) {
									costo=(int) (costo*0.85);
								}
							}	
							saldototal+=costo;
						}
					}
					String Horario ="Mañana";
					if(c==1) {
						Horario="Tarde";
					}
					System.out.println("--- Sala:"+(b+1)+" - Horario de la "+Horario+" se recaudo un total  de $"+ saldototal);
				}
			}
			System.out.println("- Saldo Recaudado total"+recaudacion[a]);
		}
	}
	
	public static void info() {
		@SuppressWarnings("resource")
		var sc= new Scanner(System.in);
		System.out.print("RUT:");
		String rut = sc.nextLine();
		System.out.println();
		int direccion = getUsuario(rut);
		if (direccion >=0) {
			user(direccion);
		}
		else {
			System.out.println("ERROR EL RUT DEL USUARIO NO APARECE EN LA BASE DE DATOS");
		}
	}
	
	public static void guardar() {
		guardarCliente();
		guardarStatus();
		guardarPeliculas();
	}
	
	public static void guardarCliente() {
		try {
			File archivo = new File ("clientes.txt"); 
			FileWriter text = new FileWriter (archivo); 
			BufferedWriter wr = new BufferedWriter(text);
			int contador=0;
			while(contador<totalusuario) {
				wr.write(usuario[contador][0]+","+usuario[contador][1]+","+usuario[contador][2]+","+usuario[contador][3]+","+saldo[contador]+"\n");
				contador++;
			}
			wr.close();
		}
		catch (Exception e) {
			System.out.println("ARCHIVO NO GUARDADO");
		}
	}
	
	public static void guardarStatus() {
		try {
			File archivo = new File ("status.txt"); 
			FileWriter text = new FileWriter (archivo); 
			BufferedWriter wr = new BufferedWriter(text);
			int contador=0;
			while(contador<totalusuario) {
				wr.write(usuario[contador][0]+","+usuario[contador][4]+"\n");
				contador++;
			}
			wr.close();
		}
		catch (Exception e) {
			System.out.println("ARCHIVO NO GUARDADO");
		}
	}
	
	public static void guardarPeliculas() {
		try {
			File archivo = new File ("status.txt"); 
			FileWriter text = new FileWriter (archivo); 
			BufferedWriter wr = new BufferedWriter(text);
			int contador=0;
			while(contador<totalmovies) {
				wr.write(pelicula[contador][0]+","+pelicula[contador][1]+","+recaudacion[contador]);
				for(int a=0;a<3;a++) {
					for(int b=0;b<2;b++) {
						if(horario[contador][a][b]) {
							String Horario ="M";
							if(b==1) {
								Horario="T";
							}
							wr.write(","+a+1+","+Horario);
						}
					}
				}
				wr.write("\n");
				contador++;
			}
			wr.close();
		}
		catch (Exception e) {
			System.out.println("ARCHIVO NO GUARDADO");
		}
	}

}
